Traceback (most recent call last):
  File "C:\Users\Sotiris\anaconda3\envs\digital_communications\lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\Users\Sotiris\anaconda3\envs\digital_communications\lib\site-packages\nbclient\client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "C:\Users\Sotiris\anaconda3\envs\digital_communications\lib\site-packages\jupyter_core\utils\__init__.py", line 173, in wrapped
    return loop.run_until_complete(inner)
  File "C:\Users\Sotiris\anaconda3\envs\digital_communications\lib\asyncio\base_events.py", line 616, in run_until_complete
    return future.result()
  File "C:\Users\Sotiris\anaconda3\envs\digital_communications\lib\site-packages\nbclient\client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "C:\Users\Sotiris\anaconda3\envs\digital_communications\lib\site-packages\nbclient\client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\Sotiris\anaconda3\envs\digital_communications\lib\site-packages\nbclient\client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Loading animation
loading = """
    <div style='display: flex; justify-content: center; align-items: center; height: 80px;'>
        <div class='loader' style='border: 12px solid #f3f3f3; /* Light grey */
                                     border-top: 12px solid #01cc97; /* Blue */
                                     border-radius: 50%;
                                     width: 40px;
                                     height: 40px;
                                     animation: spin 2s linear infinite;'></div>
    </div>
    <style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    </style>
    """
done = """
        <div style='display: flex; justify-content: center; align-items: center; height: 80px;'>
            <div style='font-size: 40px; color: #01cc97;'>&#10003;</div>
        </div>
        """
loader_html = widgets.HTML(
  value=loading
)
timer_html = widgets.HTML(
    value="Elapsed time: - seconds"
)

def ask_errors(k, M, nsamp, EbN0_db):
    L = 2**k
    SNR_db = EbN0_db - 10*np.log10(nsamp/(2*k))
    SNR = 10 ** (SNR_db * 0.1)
    x = 2 * np.floor(L * np.random.rand(M)) - L + 1
    P_x = (L**2 - 1) / 3
    Measured_x = np.sum(x**2) / len(x)

    y = []
    for i in range(len(x)):
        y.extend([x[i]] * nsamp)
    y = np.array(y)

    noise = np.random.normal(0, np.sqrt(Measured_x / SNR), len(y))
    y_noisy = y + noise

    y = np.reshape(y_noisy, (M, nsamp))
    matched = np.ones((nsamp, 1))
    z = np.matmul(y, matched) / nsamp
    l = np.arange(-L+1, L, 2)

    z = z[:, 0]
    errors = 0
    for i in range(len(z)):
        differences = np.abs(l - z[i])
        m = np.min(differences)
        index = np.where(differences == m)[0][0]
        z[i] = l[index]
        if x[i] != z[i]:
            errors += 1
    
    return errors

# Update Eb/N0 dB range to go up to 20 dB
M = 20000
nsamp = 16
EbN0_db = np.arange(0, 21, 2)  # Now goes up to 20 dB
EbN0 = 10 ** (EbN0_db / 10)

# Define the checkboxes for each modulation level
checkbox_4qam = Checkbox(value=True, description='4-ASK')
checkbox_8qam = Checkbox(value=False, description='8-ASK')
checkbox_16qam = Checkbox(value=False, description='16-ASK')

plot_output = Output()

def plot_selected_modulations(change):
    # Start timer
    start_time = time.time()

    with plot_output:
    loader_html.value = loading
        plot_output.clear_output(wait=True)
        plt.figure(figsize=(10, 7))
        colors = {'4-ASK': ('red', 'tomato'), '8-ASK': ('green', 'limegreen'), '16-ASK': ('blue', 'dodgerblue')}
        
        for k, checkbox in zip([2, 3, 4], [checkbox_4qam, checkbox_8qam, checkbox_16qam]):
            if checkbox.value:
                L = 2**k
                modulation_name = f'{L}-ASK'
                ber = [ask_errors(k, M, nsamp, db) / M / np.log2(L) for db in EbN0_db]
                plt.semilogy(EbN0_db, ber, 'o', label=f'Experimental {modulation_name}', color=colors[modulation_name][0])
                
                # Update theoretical BER calculation
                ber_theoretical = (((L - 1) / L) * erfc(np.sqrt(EbN0 * (3 * np.log2(L)) / (L**2 - 1)))) / k
                plt.semilogy(EbN0_db, ber_theoretical, linestyle='-', label=f'Theoretical {modulation_name}', color=colors[modulation_name][1])

        plt.grid(True, which='both')
        plt.xlabel("Eb/N0 (dB)")
        plt.ylabel("BER")
        plt.legend()
        plt.title('Theoretical and Experimental BER of ask_errors')

        # Show elapsed time
        elapsed_time = time.time() - start_time
        timer_html.value = f"Elapsed time: {elapsed_time:.2f} seconds"
        loader_html.value = done

        plt.show()

# Attach the update_plot function to the 'value' property of each checkbox
checkbox_4qam.observe(plot_selected_modulations, names='value')
checkbox_8qam.observe(plot_selected_modulations, names='value')
checkbox_16qam.observe(plot_selected_modulations, names='value')

inputs = widgets.VBox([checkbox_4qam, checkbox_8qam, checkbox_16qam])

# Group the loader and timer together (they will appear next to each other horizontally)
loader_timer_box = widgets.VBox([loader_html, timer_html], layout=widgets.Layout(margin='0 0 0 20px', width='auto'))

ui = widgets.HBox([inputs, loader_timer_box], layout=Layout(align_items='center'))

# Setup the display layout
display(ui, plot_output)

# Display the initial plot
plot_selected_modulations(None)
------------------


[1;36m  Cell [1;32mIn[4], line 81[1;36m[0m
[1;33m    loader_html.value = loading[0m
[1;37m    ^[0m
[1;31mIndentationError[0m[1;31m:[0m expected an indented block


